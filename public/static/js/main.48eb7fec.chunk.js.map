{"version":3,"sources":["images/icon-logout.svg","images/icon-trash.svg","components/AppNavbar.js","components/About.js","components/LoginForm.js","components/Login.js","components/Logout.js","components/ShoppingList.js","components/SignupForm.js","components/Signup.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppNavbar","useState","haveToken","setHaveToken","useEffect","localStorage","authToken","className","to","About","LoginForm","email","setEmail","password","setPassword","triggerCall","setTriggerCall","error","setError","history","useHistory","a","options","method","headers","body","JSON","stringify","fetch","response","json","data","hasOwnProperty","token","setItem","push","console","fetchData","onSubmit","event","preventDefault","htmlFor","onChange","target","value","type","id","name","Login","Logout","src","logoutIcon","alt","onClick","length","clear","ShoppingList","items","setItems","setName","authorization","result","addedItem","filter","item","_id","API_URL","fetchItems","getItem","placeholder","map","key","deleteItem","trashIcon","SignupForm","Signup","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.48eb7fec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-logout.2cab0046.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-trash.297e854f.svg\";","import React, { useState, useEffect } from 'react';\nimport { Link } from \"react-router-dom\";\n\nexport default function AppNavbar() {\n    const [haveToken, setHaveToken] = useState(false);\n\n    useEffect(() => {\n        if (localStorage.authToken) {\n            setHaveToken(true);\n        }\n    }, [haveToken]);\n\n    return (\n        <header className=\"header\">\n            <nav className=\"nav\">\n                <Link to=\"/\" className=\"nav__logo\">\n                    Shop 2000\n                </Link>\n                <ul className=\"nav__list\">\n                    {haveToken ? (\n                        <li className=\"nav__item\">\n                            <Link to=\"/user/list\" className=\"nav__link\">\n                                Your List\n                            </Link>\n                        </li>\n                    ) : (\n                        null\n                    )}\n                    <li className=\"nav__item\">\n                        <Link to=\"/user/login\" className=\"nav__link\">\n                            Log In\n                        </Link>\n                    </li>\n                </ul>\n            </nav>\n        </header>\n    )\n}\n","import React from 'react';\n\nexport default function About() {\n    return (\n        <main className=\"main\">\n            <h1>Create Personalized Shopping Lists</h1>\n        </main>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\n\nexport default function LoginForm() {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [triggerCall, setTriggerCall] = useState(false);\n    const [error, setError] = useState(\"\");\n\n    let history = useHistory();\n\n    useEffect(() => {\n        async function fetchData() {\n            if (!triggerCall) return; // Only run hook on triggering form submit\n\n            const API_URL = \"/api/user/login\";\n            const options = {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                  email,\n                  password\n                })\n            };\n    \n            try {\n                \n                const response = await fetch(API_URL, options);\n                const data = await response.json();\n                \n                // Return from function if an error has been set\n                if (data.hasOwnProperty(\"error\")) {\n                    setError(data.error);\n                    setTriggerCall(false);\n\n                    return;\n                }\n\n                const token = data;\n    \n                localStorage.setItem(\"authToken\", token);\n                setTriggerCall(false); // Reset trigger\n                history.push(\"/user/list\");\n    \n            } catch (err) {\n                setTriggerCall(false); // Reset trigger\n                console.error(err);\n            }\n        }\n\n        fetchData();\n    }, [triggerCall]);\n\n\n    function handleSubmit(event) {\n        event.preventDefault();\n\n        setTriggerCall(true);\n    }\n\n    return (\n        <form onSubmit={handleSubmit} className=\"login-form form\">\n          {error ? (\n              <h3 className=\"form__error\">{error}</h3>\n          ) : null }\n          <div className=\"form-group\">\n              <label htmlFor=\"login-email\" className=\"form-group__label\">Email</label>\n              <input\n                onChange={(event) => setEmail(event.target.value)}\n                type=\"email\"\n                id=\"login-email\"\n                name=\"login-email\"\n                className=\"form-group__input\"\n              />\n          </div>\n          <div className=\"form-group\">\n              <label htmlFor=\"login-password\" className=\"form-group__label\">Password</label>\n              <input\n                onChange={(event) => setPassword(event.target.value)}\n                type=\"password\"\n                id=\"login-password\"\n                name=\"login-password\"\n                className=\"form-group__input\"\n              />\n          </div>\n          <div className=\"form-group\">\n              <button type=\"submit\" className=\"form-group__submit\">Submit</button>\n          </div>\n        </form>\n    )\n}\n","import React from 'react';\nimport LoginForm from './LoginForm';\n\nexport default function Login() {\n    return (\n        <main className=\"main\">\n            <h1 className=\"login-title\">Login Page</h1>\n            <LoginForm />\n        </main>\n    )\n}\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport logoutIcon from \"../images/icon-logout.svg\";\n\nexport default function Logout() {\n    let history = useHistory();\n\n    function handleLogout(event) {\n        if (localStorage.length > 0) {\n            localStorage.clear();\n        }\n\n        history.push(\"/user/login\");\n    }\n\n    return (\n        <div className=\"logout-group\">\n           <img src={logoutIcon} alt=\"Log out icon\" className=\"logout-icon\"/>\n           <button onClick={handleLogout} className=\"logout-btn\">Log Out</button> \n        </div>\n    )\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport trashIcon from \"../images/icon-trash.svg\";\nimport Logout from \"./Logout\";\n\nexport default function ShoppingList() {\n    const [items, setItems] = useState([]);\n    const [name, setName] = useState(\"\");\n\n    useEffect(() => {\n        async function fetchItems() {\n            try {\n                // Make req to API\n                const API_URL = \"/api/user/items\";\n                const options = {\n                    method: \"GET\",\n                    headers: {\n                        authorization: `Bearer ${localStorage.authToken}`,\n                        \"Content-Type\": \"application/json\"\n                    }\n                };\n\n                const result = await fetch(API_URL, options);\n                const data = await result.json();\n\n                setItems(data);\n            } catch (err) {\n                console.error(err);\n            }\n            \n        }\n\n        fetchItems();\n    }, []);\n\n    async function handleSubmitItem(event) {\n        event.preventDefault();\n\n        const API_URL = \"/api/user/items\";\n        const options = {\n            method: \"POST\",\n            headers: {\n                authorization: `Bearer ${localStorage.authToken}`,\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              name: name\n            })\n        };\n\n        try {\n            // Make req to API\n            const result = await fetch(API_URL, options);\n            const addedItem = await result.json();\n\n            setItems([\n                ...items,\n                addedItem\n            ]);\n\n            setName(\"\"); // Clear input\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    async function deleteItem(id) {\n        try {\n            setItems(items.filter(item => item._id !== id));\n\n            // Make req to API\n            const API_URL = `/api/user/items/${id}`;\n            const options = {\n                method: \"DELETE\",\n                headers: {\n                    authorization: `Bearer ${localStorage.authToken}`,\n                    \"Content-Type\": \"application/json\"\n                }\n            };\n            \n            await fetch(API_URL, options);\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    // Auth route guard\n    if (!localStorage.getItem(\"authToken\")) {\n        return <Redirect to=\"/user/login\" />\n    }\n\n    return (\n        <main className=\"main\">\n            <form onSubmit={handleSubmitItem} className=\"form\">\n                <div className=\"form-group\">\n                    <input\n                        onChange={(event) => setName(event.target.value)}\n                        value={name}\n                        name=\"name\"\n                        id=\"item\"\n                        placeholder=\"Enter new item\"\n                        type=\"text\"\n                        className=\"form-group__input\"\n                    />\n                </div>\n                <button type=\"submit\" className=\"form-group__submit\">Add Item</button>\n            </form>\n            <ul className=\"shopping-list\">\n                {items.map(({ _id, name }) => (\n                    <li className=\"shopping-list__item\" key={_id}>\n                        <button onClick={()=> deleteItem(_id)} className=\"shopping-list__item__delete\">\n                            <img src={trashIcon} alt=\"Trashcan delete icon\" className=\"delete-icon\"/>\n                        </button>\n                        <span>\n                            {name}\n                        </span>\n                    </li>\n                ))}\n            </ul>\n            <Logout />\n        </main>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\n\nexport default function SignupForm() {\n    const [name, setName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [triggerCall, setTriggerCall] = useState(false);\n    const [error, setError] = useState(\"\");\n\n    let history = useHistory();\n\n    useEffect(() => {\n        async function fetchData() {\n            if (!triggerCall) return; // Only trigger on form submit\n\n            const API_URL = \"/api/user/register\";\n            const options = {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify({\n                  name,\n                  email,\n                  password\n                })\n            };\n    \n            try {\n                \n                const response = await fetch(API_URL, options);\n                const data = await response.json();\n                \n                // Return from function if an error has been set\n                if (data.hasOwnProperty(\"error\")) {\n                    setError(data.error);\n                    setTriggerCall(false);\n\n                    return;\n                }\n\n                setTriggerCall(false); // Reset trigger\n                history.push(\"/user/login\");\n    \n            } catch (err) {\n                setTriggerCall(false); // Reset trigger\n                console.error(err);\n            }\n        }\n\n        fetchData();\n    }, [triggerCall]);\n\n\n    function handleSubmit(event) {\n        event.preventDefault();\n\n        setTriggerCall(true);\n    }\n\n    return (\n        <form onSubmit={handleSubmit} className=\"login-form form\">\n          {error ? (\n              <h3 className=\"form__error\">{error}</h3>\n          ) : null }\n          <div className=\"form-group\">\n              <label htmlFor=\"login-name\" className=\"form-group__label\">Name</label>\n              <input\n                onChange={(event) => setName(event.target.value)}\n                type=\"text\"\n                id=\"login-name\"\n                name=\"login-name\"\n                className=\"form-group__input\"\n              />\n          </div>\n          <div className=\"form-group\">\n              <label htmlFor=\"login-email\" className=\"form-group__label\">Email</label>\n              <input\n                onChange={(event) => setEmail(event.target.value)}\n                type=\"email\"\n                id=\"login-email\"\n                name=\"login-email\"\n                className=\"form-group__input\"\n              />\n          </div>\n          <div className=\"form-group\">\n              <label htmlFor=\"login-password\" className=\"form-group__label\">Password</label>\n              <input\n                onChange={(event) => setPassword(event.target.value)}\n                type=\"password\"\n                id=\"login-password\"\n                name=\"login-password\"\n                className=\"form-group__input\"\n              />\n          </div>\n          <div className=\"form-group\">\n              <button type=\"submit\" className=\"form-group__submit\">Submit</button>\n          </div>\n        </form>\n    )\n}\n","import React from 'react';\nimport SignupForm from \"./SignupForm\";\n\nexport default function Signup() {\n    return (\n        <main className=\"main\">\n            <h1 className=\"signup-title\">Sign Up</h1>\n            <SignupForm />\n        </main>\n    )\n}\n","import React from 'react';\nimport AppNavbar from './components/AppNavbar';\nimport About from \"./components/About\";\nimport Login from \"./components/Login\";\nimport Logout from \"./components/Logout\";\nimport ShoppingList from './components/ShoppingList';\nimport Signup from './components/Signup';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n\n      <div className=\"App\">\n        <AppNavbar />\n        <Switch>\n          <Route path=\"/\" exact component={About} />\n          <Route path=\"/user/signup\" exact component={Signup} />\n          <Route path=\"/user/login\" exact component={Login} />\n          <Route path=\"/user/logout\" exact component={Logout} />\n          <Route path=\"/user/list\" exact component={ShoppingList} />\n        </Switch>\n      </div>\n\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}